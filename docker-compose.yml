# TODO:  create the cervice for the beat only

version: "3.4"
services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    environment:
        RABBITMQ_DEFAULT_USER: "rabbitmq"
        RABBITMQ_DEFAULT_PASS: "rabbitmq"
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - rabbitmq
        - main

  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:latest
    environment:
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=postgres
        - POSTGRES_DB=postgres
    networks:
        - main
    ports:
        - "5432:5432"
    restart: on-failure
    volumes:
        - postgresql-data:/var/lib/postgresql/data

  app:
    build: .
    container_name: app
    command: sh -c "gunicorn app.wsgi -b 0.0.0.0:8000" #python manage.py collectstatic --no-input && python manage.py migrate && 
    depends_on:
        - postgres
        - rabbitmq
    ports:
        - "8000:8000"
    expose:
        - "8000"
    hostname: app
    image: app-image
    networks:
        - main
    restart: on-failure


  celery_worker:
    command: sh -c "celery -A app worker -l info"
    container_name: celery_worker
    depends_on:
        - app
        - postgres
        - rabbitmq
    hostname: celery_worker
    image: app-image

    networks:
        - main
    restart: on-failure

  celery_beat:
    command: sh -c "celery -A app beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    container_name: celery_beat
    depends_on:
        - app
        - postgres
        - rabbitmq
    hostname: celery_beat
    image: app-image
    networks:
        - main
    restart: on-failure

networks:
  main:

  rabbitmq:
    driver: bridge

volumes:
  postgresql-data:
